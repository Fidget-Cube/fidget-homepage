<!DOCTYPE html>
<html>
    <head>
        <title>&#387;u&#7433;&#670;&#596;&#592;H &#477;qn&#390;-&#647;&#477;&#387;p&#7433;&#8498;</title>
        <meta name="description" content="OmgZip">
        <?php include "../modules/head.html"?>
    </head>
    <body>
        <?php include "../modules/header.html"?>
        <div class="body">
        <div class="blog_post">
            <h1 id="omgzip">OMGzip</h1>
            <h2 id="omg-it-s-a-zip-">OMG, it&#39;s a .zip!</h2>
            <blockquote>
            <p>solves: 79<br>points: 56<br>challenge file(s): <a href="https://github.com/Fidget-Cube/write-ups/tree/main/2023/DEFCON_CTF_Qualifiers/OMGzip/omgzip">omgzip</a>, <a href="https://github.com/Fidget-Cube/write-ups/tree/main/2023/DEFCON_CTF_Qualifiers/OMGzip/data.tar.omgzip">data.tar.omgzip</a><br>solution file(s): <a href="https://github.com/Fidget-Cube/write-ups/tree/main/2023/DEFCON_CTF_Qualifiers/OMGzip/decompressor.py">decompressor.py</a><br>original challenge github: <a href="https://github.com/Nautilus-Institute/quals-2023/tree/main/omgzip">https://github.com/Nautilus-Institute/quals-2023/tree/main/omgzip</a>  </p>
            </blockquote>
            <p>Just this past weekend, <a href="https://www.meetup.com/pacifichackers/">Pacific Hackers Association</a> and <a href="https://www.meetup.com/hackmiami/">HackMiami</a> joined forces to compete in the <a href="https://quals.2023.nautilus.institute/index.html">DEFCON CTF Qualifiers</a>. The top 12 teams from this CTF go on to play the most competitive and challenging CTF in the world at DEFCON 31. Though, to be fair, our team wasn't of that caliber. We were able to solve 2 challenges (not counting the sanity checks) and finished in 92nd place, which is a great success by my standards! I was able to solve this one with the help of my friend Sam. It's a reverse engineering challenge, but with Python code instead of x86 assembly, which makes things much nicer.</p>
            <p>data.tar.omgzip is a .tar file compressed using a custom compression program called omgzip. The Python source code for omgzip is provided, so all you need to do is reverse the logic of the program and write your own decompression program.</p>
            <p>From the creator:<br>&quot;The original version of this challenge was pretty trivially solvable by ChatGPT, so I made it more difficult before its release and added a bunch of random comments and changed a bunch of variable names to make doing that take more time. We&#39;ll see if I was successful or not.&quot;</p>
            <p>The source code is pretty funny to read through. All the comments are basically worthless, and the creator even makes use of confusing naming conventions and data types (i.e.  <code>idx += True</code> ) in order to throw off any kind of LLM trying to understand the code logic automatically. Regardless, any human with a decent amount of programming experience shouldn&#39;t be thrown off by this as long as they examine the logic of the code itself, it&#39;s not overly complicated.</p>
            <p>Overall, the compression can be broken down into two steps. First, the compress() function is called, which looks for repeated concurrent bytes in the file and groups them together with a count. This can be reversed with some simple if/else logic, which I&#39;ve done in uncompress_part1(). The second step calls the encode() method from a Deflator class on the file bytes, which is a bit more complicated.</p>
            <p>To understand this second step, you first need to understand the data structure defined by the Family class. For those familiar with data structures, this is a binary tree (<a href="https://www.geeksforgeeks.org/binary-tree-data-structure/">https://www.geeksforgeeks.org/binary-tree-data-structure/</a>) implementation. Each node contains an int of data and pointers to its parent and two children. This data structure is used by the Deflater class to map common bytes to shorter bit arrays, which I&#39;ll get into later.</p>
            <p>When an object of the Deflater class is created, a complete binary tree of depth 8 is created and stored in self.money (see &quot;Types of binary trees&quot; <a href="https://en.wikipedia.org/wiki/Binary_tree">https://en.wikipedia.org/wiki/Binary_tree</a>). Each node of the binary tree at depth 8 contains a number. Since the tree is 8 layers deep, there are 256 total nodes at the 8th layer, because 2^8 = 256. The nodes store incremental numbers from &quot;right&quot; to &quot;left&quot;, starting with 0 in the rightmost node and ending with 255 in the leftmost. For purposes of visualizing the graph, I&#39;m speaking as if the &quot;successful_firstborn&quot; child is on the right side of the parent, and the &quot;conflicted_stepchild&quot; child is on the left side. Pointers to each of these layer 8 nodes are also stored in self.dictionary, from right (at index &quot;0&quot;) to left (at index &quot;255&quot;).</p>
            <p>In case your head is spinning, here&#39;s a visual aid: </p>
            <img src="https://raw.githubusercontent.com/Fidget-Cube/write-ups/main/2023/DEFCON_CTF_Qualifiers/OMGzip/bintree.jpg" alt="">
            <p>Luckily you wont have to reverse this setup step; setting up the binary tree will be exactly the same for decompression.</p>
            <p>Moving on to the encode() method. This method runs _travesty() on each individual byte of the file. _travesty() plugs this byte into self.dictionary in order to get one of the binary tree nodes at layer 8. From this node, it then travels up the levels of the tree, writing a single bit of data for each layer travelled. If the child node is on the left side of the parent, a 1 is written, and if on the right, a 0 is written. The first time _travesty() is run, this simply writes the binary representation of the input byte, because of the way the tree was set up. Take 0x00 for example. The tree is 8 layers deep, and numbers are ordered from lowest to highest left -&gt; right. 0x00 is on the farthest right node and is on the right side of every parent, so traversing the tree upwards produces 00000000. These bits are then added to the output array in big-endian format (most significant bit on the left), and then _magic() function is called on the starting layer 8 node before returning.</p>
            <p>If the _magic() function wasn&#39;t called, each call to _travesty() would output the exact byte that was put in, as described above. However, _magic() performs a bit of scrambling on the binary tree on each pass, which makes things complicated. Put simply, _magic() switches the position of the input node with its aunt/uncle node, then does the same to that aunt/uncle&#39;s parent node until it reaches the root of the tree. Ultimately this puts the node at a higher layer in the tree, and also makes the tree no longer complete. Fortunately, you don&#39;t need to reverse this function, but it is important to understand, because this means our future bytes wont always map to themselves anymore, nor will they always map to 8 bits in the resulting file. If you do want a visual aid, though, I&#39;ve got a rough drawing here: </p>
            <img src="https://raw.githubusercontent.com/Fidget-Cube/write-ups/main/2023/DEFCON_CTF_Qualifiers/OMGzip/magic.jpg" alt="">
            <p>So, that&#39;s it! The encode() method transforms each byte into an array of bits, which are combined and converted into bytes and returned. Once you understand the program, you can write your decompression algorithm.</p>
            <p>In my solution, I copied over the entire Family and Deflater classes into my decompression script, since their functions can still be used for decompression (I did change some of the names to make more sense though). I added a new function, decode(), that starts by converting the entire file into a bit array, since that&#39;s the last step performed by encode(). I then wrote another new function, _tribute(), which, in combination with decode(), iterates over the entire bit array and recovers each byte one by one. Since _travesty() traverses the binary tree from bottom to top, _tribute() instead traverses it from top to bottom. The path it follows is determined by the bit array; if a 1 is encountered, it goes to the left child, if a 0, the right. Once it finds a node with no children, it can simply read the data inside the node to get the original byte used to encode the bits. If the decompression is done in order, starting from the beginning of the file, I can also run _magic() (renamed _scrambler) on the node that was found to update the binary tree the same way it was updated during compression. This process of using input bits to traverse the tree, then running _magic() each time we complete a byte, is looped over until we run out of input bits.</p>
            <p>In total, to decompress the file data.tar.omgzip, you need to perform 3 steps. First, remove the OMGZIP header. Second, use your custom decode() function within the Deflater class to decode the bits of the file into their original bytes. Third and finally, use your reversed compress() function to expand the repeated bits of the file. And that&#39;s it! Write the bytes to data.tar, un-tar the archive, and get the flag from the &quot;flag&quot; file!</p>
            <p>(Alternatively, just run decompressor.py on data.tar.omgzip. But that&#39;s just using my solution, and that&#39;s no fun right?)</p>
            <p>Addendum:<br>The implementation I wrote in Python is really slow, taking around 15-20 minutes to decompress the whole file. A faster implementation could be written in a faster language, like C++ or Rust. My friend Sam helped a lot with the completion of this challenge and wrote his own implementation of the algorithm in Rust. You can find his solution here: <a href="">LINK MISSING</a>.</p>
        </div>
        </div>
        <?php include "../modules/footer.html"?>
    </body>
</html>